{
  "openapi" : "3.0.1",
  "info" : {
    "title" : "Cosmos Dashboard APIs",
    "description": "API for dashboard applications to manage content and settings in the Cosmos platform",
    "version" : "2025-04-18T14:26:01Z"
  },
  "servers" : [ {
    "url" : "{baseUrl}",
    "variables" : {
      "baseUrl": {
        "default": "https://api.eu-west-1.aworld.cloud/dashboard/v1"
      }
    }
  } ],
  "paths" : {
    "/activities" : {
      "get" : {
        "summary": "List activities",
        "description": "Retrieves a paginated list of activities available in the workspace",
        "parameters": [
          {
            "name": "nextToken",
            "in": "query",
            "description": "Pagination cursor for fetching the next set of results",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of activities to return per page",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of activities retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Activity"
                      }
                    },
                    "nextToken": {
                      "type": "string",
                      "description": "Pagination cursor for the next set of results"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security" : [ {
          "dashboard-v1-rest-api-authorizer" : [ ]
        } ]
      }
    },
    "/activities/{activityId}" : {
      "get" : {
        "summary": "Get activity by ID",
        "description": "Retrieves a specific activity by its unique identifier",
        "parameters" : [ {
          "name" : "activityId",
          "in" : "path",
          "description": "Unique identifier of the activity to retrieve",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses": {
          "200": {
            "description": "Activity retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Activity"
                }
              }
            }
          },
          "404": {
            "description": "Activity not found"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security" : [ {
          "dashboard-v1-rest-api-authorizer" : [ ]
        } ]
      },
      "put" : {
        "summary": "Create activity",
        "description": "Creates a new activity with the specified ID. It is recommended to use a human-readable ID.",
        "parameters" : [ {
          "name" : "activityId",
          "in" : "path",
          "description": "Unique identifier for the new activity",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateActivityRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Activity created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Activity"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "409": {
            "description": "Activity ID already exists"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security" : [ {
          "dashboard-v1-rest-api-authorizer" : [ ]
        } ]
      },
      "post" : {
        "summary": "Update activity",
        "description": "Updates an existing activity identified by its ID",
        "parameters" : [ {
          "name" : "activityId",
          "in" : "path",
          "description": "Unique identifier of the activity to update",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateActivityRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Activity updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Activity"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Activity not found"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security" : [ {
          "dashboard-v1-rest-api-authorizer" : [ ]
        } ]
      }
    },
    "/activities/{activityId}/publish" : {
      "post" : {
        "summary": "Publish an activity",
        "description": "Publishes an activity, making it available for use in the application",
        "parameters" : [ {
          "name" : "activityId",
          "in" : "path",
          "description": "Unique identifier of the activity to publish",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses": {
          "200": {
            "description": "Activity published successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Activity"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "404": {
            "description": "Activity not found"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security" : [ {
          "dashboard-v1-rest-api-authorizer" : [ ]
        } ]
      }
    },
    "/rewardCurrencies" : {
      "get" : {
        "summary": "List reward currencies",
        "description": "Retrieves a paginated list of reward currencies available in the workspace",
        "parameters": [
          {
            "name": "nextToken",
            "in": "query",
            "description": "Pagination token for fetching the next set of results",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of reward currencies to return per page",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of reward currencies retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RewardCurrency"
                      }
                    },
                    "nextToken": {
                      "type": "string",
                      "description": "Pagination token for the next set of results"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security" : [ {
          "dashboard-v1-rest-api-authorizer" : [ ]
        } ]
      }
    },
    "/rewardCurrencies/{rewardCurrencyId}" : {
      "get" : {
        "summary": "Get reward currency by ID",
        "description": "Retrieves a specific reward currency by its unique identifier",
        "parameters" : [ {
          "name" : "rewardCurrencyId",
          "in" : "path",
          "description": "Unique identifier of the reward currency to retrieve",
          "required" : true,
          "schema" : {
            "type" : "string",
            "minLength": 2,
            "maxLength": 30,
            "pattern": "^\\S+$"
          }
        } ],
        "responses": {
          "200": {
            "description": "Reward currency retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RewardCurrency"
                }
              }
            }
          },
          "404": {
            "description": "Reward currency not found"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security" : [ {
          "dashboard-v1-rest-api-authorizer" : [ ]
        } ]
      },
      "put" : {
        "summary": "Create reward currency",
        "description": "Creates a new reward currency with the specified ID. It is recommended to use a human-readable ID.",
        "parameters" : [ {
          "name" : "rewardCurrencyId",
          "in" : "path",
          "description": "Unique identifier for the new reward currency",
          "required" : true,
          "schema" : {
            "type" : "string",
            "minLength": 2,
            "maxLength": 30,
            "pattern": "^\\S+$"
          }
        } ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRewardCurrencyRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reward currency created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RewardCurrency"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "409": {
            "description": "Reward currency ID already exists"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security" : [ {
          "dashboard-v1-rest-api-authorizer" : [ ]
        } ]
      },
      "post" : {
        "summary": "Update reward currency",
        "description": "Updates an existing reward currency identified by its ID",
        "parameters" : [ {
          "name" : "rewardCurrencyId",
          "in" : "path",
          "description": "Unique identifier of the reward currency to update",
          "required" : true,
          "schema" : {
            "type" : "string",
            "minLength": 2,
            "maxLength": 30,
            "pattern": "^\\S+$"
          }
        } ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRewardCurrencyRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reward currency updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RewardCurrency"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Reward currency not found"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security" : [ {
          "dashboard-v1-rest-api-authorizer" : [ ]
        } ]
      }
    },
    "/rewardCurrencies/{rewardCurrencyId}/publish" : {
      "post" : {
        "summary": "Publish a reward currency",
        "description": "Publishes a reward currency, making it available for use in the application",
        "parameters" : [ {
          "name" : "rewardCurrencyId",
          "in" : "path",
          "description": "Unique identifier of the reward currency to publish",
          "required" : true,
          "schema" : {
            "type" : "string",
            "minLength": 2,
            "maxLength": 30,
            "pattern": "^\\S+$"
          }
        } ],
        "responses": {
          "200": {
            "description": "Reward currency published successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RewardCurrency"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "404": {
            "description": "Reward currency not found"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security" : [ {
          "dashboard-v1-rest-api-authorizer" : [ ]
        } ]
      }
    },
    "/rewardRules" : {
      "get" : {
        "summary": "List reward rules",
        "description": "Retrieves a paginated list of reward rules available in the workspace",
        "parameters": [
          {
            "name": "nextToken",
            "in": "query",
            "description": "Pagination token for fetching the next set of results",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of reward rules to return per page",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of reward rules retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RewardRule"
                      }
                    },
                    "nextToken": {
                      "type": "string",
                      "description": "Pagination token for the next set of results"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security" : [ {
          "dashboard-v1-rest-api-authorizer" : [ ]
        } ]
      },
      "post" : {
        "summary": "Create reward rule",
        "description": "Creates a new reward rule with a system-generated ID",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRewardRuleRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reward rule created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RewardRule"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security" : [ {
          "dashboard-v1-rest-api-authorizer" : [ ]
        } ]
      }
    },
    "/rewardRules/{rewardRuleId}" : {
      "get" : {
        "summary": "Get reward rule by ID",
        "description": "Retrieves a specific reward rule by its unique identifier",
        "parameters" : [ {
          "name" : "rewardRuleId",
          "in" : "path",
          "description": "Unique identifier of the reward rule to retrieve",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses": {
          "200": {
            "description": "Reward rule retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RewardRule"
                }
              }
            }
          },
          "404": {
            "description": "Reward rule not found"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security" : [ {
          "dashboard-v1-rest-api-authorizer" : [ ]
        } ]
      },
      "post" : {
        "summary": "Update reward rule",
        "description": "Updates an existing reward rule identified by its ID",
        "parameters" : [ {
          "name" : "rewardRuleId",
          "in" : "path",
          "description": "Unique identifier of the reward rule to update",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRewardRuleRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reward rule updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RewardRule"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Reward rule not found"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security" : [ {
          "dashboard-v1-rest-api-authorizer" : [ ]
        } ]
      }
    },
    "/rewardRules/{rewardRuleId}/publish" : {
      "post" : {
        "summary": "Publish a reward rule",
        "description": "Publishes a reward rule, making it available for use in the application",
        "parameters" : [ {
          "name" : "rewardRuleId",
          "in" : "path",
          "description": "Unique identifier of the reward rule to publish",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses": {
          "200": {
            "description": "Reward rule published successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RewardRule"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "404": {
            "description": "Reward rule not found"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security" : [ {
          "dashboard-v1-rest-api-authorizer" : [ ]
        } ]
      }
    },
    "/tags" : {
      "get" : {
        "summary": "List tags",
        "description": "Retrieves a paginated list of tags available in the workspace",
        "parameters": [
          {
            "name": "nextToken",
            "in": "query",
            "description": "Pagination token for fetching the next set of results",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of tags to return per page",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of tags retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Tag"
                      }
                    },
                    "nextToken": {
                      "type": "string",
                      "description": "Pagination token for the next set of results"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security" : [ {
          "dashboard-v1-rest-api-authorizer" : [ ]
        } ]
      },
      "post" : {
        "summary": "Create tag",
        "description": "Creates a new tag with a system-generated ID",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTagRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Tag created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security" : [ {
          "dashboard-v1-rest-api-authorizer" : [ ]
        } ]
      }
    },
    "/tags/{tagId}" : {
      "get" : {
        "summary": "Get tag by ID",
        "description": "Retrieves a specific tag by its unique identifier",
        "parameters" : [ {
          "name" : "tagId",
          "in" : "path",
          "description": "Unique identifier of the tag to retrieve",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses": {
          "200": {
            "description": "Tag retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            }
          },
          "404": {
            "description": "Tag not found"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security" : [ {
          "dashboard-v1-rest-api-authorizer" : [ ]
        } ]
      },
      "post" : {
        "summary": "Update tag",
        "description": "Updates an existing tag identified by its ID",
        "parameters" : [ {
          "name" : "tagId",
          "in" : "path",
          "description": "Unique identifier of the tag to update",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTagRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Tag updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Tag not found"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security" : [ {
          "dashboard-v1-rest-api-authorizer" : [ ]
        } ]
      }
    },
    "/tags/{tagId}/publish" : {
      "post" : {
        "summary": "Publish a tag",
        "description": "Publishes a tag, making it available for use in the application",
        "parameters" : [ {
          "name" : "tagId",
          "in" : "path",
          "description": "Unique identifier of the tag to publish",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses": {
          "200": {
            "description": "Tag published successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "404": {
            "description": "Tag not found"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security" : [ {
          "dashboard-v1-rest-api-authorizer" : [ ]
        } ]
      }
    },
    "/users" : {
      "get" : {
        "summary": "List users",
        "description": "Retrieves a paginated list of users available in the workspace",
        "parameters": [
          {
            "name": "nextToken",
            "in": "query",
            "description": "Pagination token for fetching the next set of results",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of users to return per page",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of users retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/User"
                      }
                    },
                    "nextToken": {
                      "type": "string",
                      "description": "Pagination token for the next set of results"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security" : [ {
          "dashboard-v1-rest-api-authorizer" : [ ]
        } ]
      },
      "post" : {
        "summary": "Create user",
        "description": "Creates a new user in the system with generated credentials",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "409": {
            "description": "User with the specified email already exists"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security" : [ {
          "dashboard-v1-rest-api-authorizer" : [ ]
        } ]
      }
    },
    "/users/{userId}" : {
      "get" : {
        "summary": "Get user by ID",
        "description": "Retrieves a specific user by their unique identifier",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description": "Unique identifier of the user to retrieve",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses": {
          "200": {
            "description": "User retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security" : [ {
          "dashboard-v1-rest-api-authorizer" : [ ]
        } ]
      }
    }
  },
  "components" : {
    "securitySchemes": {
      "oauth2": {
        "type": "oauth2",
        "description": "OAuth2 Client Credentials Flow",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://auth.eu-west-1.aworld.cloud/oauth2/token",
            "scopes": {}
          }
        },
        "x-postman-variables": [
          {
            "key": "clientId",
            "value": "{{clientId}}"
          },
          {
            "key": "clientSecret",
            "value": "{{clientSecret}}"
          }
        ]
      },
      "dashboard-v1-rest-api-authorizer": {
        "type": "apiKey",
        "name": "Authorization",
        "in": "header",
        "x-amazon-apigateway-authtype": "custom",
        "description": "API Gateway custom authorizer for validating dashboard user authentication"
      }
    },
    "schemas": {
      "User": {
        "type": "object",
        "description": "User entity representing a person who can access the system",
        "required": ["userId", "principalId", "lang", "timezone", "accountId", "workspaceId"],
        "properties": {
          "userId": {
            "type": "string",
            "description": "Unique identifier for the user"
          },
          "principalId": {
            "type": "string",
            "description": "Identifier used for authentication"
          },
          "externalId": {
            "type": "string",
            "description": "Optional external system identifier for the user"
          },
          "lang": {
            "type": "string",
            "description": "User's preferred language code",
            "default": "en"
          },
          "timezone": {
            "type": "string",
            "description": "User's timezone",
            "default": "UTC"
          },
          "accountId": {
            "type": "string",
            "description": "The account ID that this user belongs to"
          },
          "workspaceId": {
            "type": "string",
            "description": "The workspace ID that this user belongs to"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the user was created"
          },
          "updatedAt": {
            "type": "string", 
            "format": "date-time",
            "description": "Timestamp when the user was last updated"
          }
        }
      },
      "CreateUserRequest": {
        "type": "object",
        "description": "Data required to create a new user",
        "required": ["email"],
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "User's email address, used for login"
          },
          "password": {
            "type": "string",
            "description": "Password for the user (if not provided, a temporary password will be generated)",
            "format": "password"
          },
          "lang": {
            "type": "string",
            "description": "User's preferred language code",
            "default": "en"
          },
          "timezone": {
            "type": "string",
            "description": "User's timezone",
            "default": "UTC"
          },
          "externalId": {
            "type": "string",
            "description": "Optional external system identifier for the user"
          }
        }
      },
      "Tag": {
        "type": "object",
        "description": "Tag entity used for categorizing and filtering content",
        "required": ["tagId", "namespace", "variant", "origin", "defaultLang", "langs", "createdAt", "updatedAt"],
        "properties": {
          "tagId": {
            "type": "string",
            "description": "Unique identifier for the tag"
          },
          "namespace": {
            "type": "string",
            "description": "Namespace that groups related tags together"
          },
          "variant": {
            "type": "string",
            "description": "Variant identifier within the namespace"
          },
          "origin": {
            "type": "string",
            "enum": ["CATALOG", "CUSTOM"],
            "description": "Whether the tag comes from a central catalog or is custom-created"
          },
          "tagCatalogId": {
            "type": "string",
            "description": "ID reference to the original tag in the catalog if applicable"
          },
          "syncWithCatalog": {
            "type": "boolean",
            "description": "Whether the tag should be synced with catalog updates"
          },
          "defaultLang": {
            "type": "string",
            "description": "The default language code for the tag content"
          },
          "langs": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of language codes available for this tag"
          },
          "accountId": {
            "type": "string",
            "description": "The account ID that owns this tag"
          },
          "workspaceId": {
            "type": "string",
            "description": "The workspace ID that contains this tag"
          },
          "sourceRegion": {
            "type": "string",
            "description": "AWS region where the tag was created"
          },
          "stage": {
            "type": "string",
            "enum": ["DRAFT", "PUBLISHED"],
            "description": "Current publication stage of the tag"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the tag was created"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the tag was last updated"
          }
        }
      },
      "CreateTagRequest": {
        "type": "object",
        "description": "Data required to create a new tag",
        "required": ["namespace", "variant", "defaultLang", "translations"],
        "properties": {
          "namespace": {
            "type": "string",
            "description": "Namespace that groups related tags together"
          },
          "variant": {
            "type": "string",
            "description": "Variant identifier within the namespace"
          },
          "defaultLang": {
            "type": "string",
            "description": "The default language code for the tag content"
          },
          "translations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagTranslation"
            },
            "description": "List of translations for the tag content",
            "minItems": 1,
            "maxItems": 10
          }
        }
      },
      "UpdateTagRequest": {
        "type": "object",
        "description": "Data required to update an existing tag",
        "required": ["namespace", "variant", "defaultLang", "translations"],
        "properties": {
          "namespace": {
            "type": "string",
            "description": "Updated namespace that groups related tags together"
          },
          "variant": {
            "type": "string",
            "description": "Updated variant identifier within the namespace"
          },
          "defaultLang": {
            "type": "string",
            "description": "Updated default language code for the tag content"
          },
          "translations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagTranslation"
            },
            "description": "Updated list of translations for the tag content",
            "minItems": 1,
            "maxItems": 10
          }
        }
      },
      "TagTranslation": {
        "type": "object",
        "description": "Translation for tag content in a specific language",
        "required": ["lang", "label"],
        "properties": {
          "lang": {
            "type": "string",
            "description": "Language code for this translation"
          },
          "label": {
            "type": "string",
            "description": "Translated label for the tag"
          },
          "description": {
            "type": "string",
            "description": "Translated description for the tag"
          }
        }
      },
      "JsonLogicExpression": {
        "description": "JSON Logic expression used for defining conditions and calculations",
        "oneOf": [
          {
            "type": "object",
            "description": "Object representation of a JSON Logic rule"
          },
          {
            "type": "number",
            "description": "Numeric literal value"
          },
          {
            "type": "boolean",
            "description": "Boolean literal value"
          }
        ]
      },
      "Reward": {
        "type": "object",
        "description": "Definition of a reward associated with a reward rule",
        "required": ["rewardCurrencyId", "expression"],
        "properties": {
          "rewardCurrencyId": {
            "type": "string",
            "description": "Identifier of the reward currency to award"
          },
          "expression": {
            "$ref": "#/components/schemas/JsonLogicExpression",
            "description": "JSON Logic expression that calculates the amount of reward currency to award"
          }
        }
      },
      "RewardRule": {
        "type": "object",
        "description": "Reward rule entity defining conditions for awarding rewards",
        "required": ["rewardRuleId", "name", "ruleType", "matchEntity", "matchCondition", "applicationMode", "origin", "defaultLang", "langs", "rewards", "createdAt", "updatedAt"],
        "properties": {
          "rewardRuleId": {
            "type": "string",
            "description": "Unique identifier for the reward rule"
          },
          "name": {
            "type": "string",
            "description": "Name of the reward rule"
          },
          "ruleType": {
            "type": "string",
            "enum": ["INSTANCE", "ENTITY", "TAG"],
            "description": "Type of rule determining its scope and application"
          },
          "matchEntity": {
            "type": "string",
            "enum": ["Activity", "Quiz", "Tag"],
            "description": "Entity type this rule applies to"
          },
          "matchEntityId": {
            "type": "string",
            "description": "Specific entity ID this rule applies to (if applicable)"
          },
          "matchCondition": {
            "$ref": "#/components/schemas/JsonLogicExpression",
            "description": "JSON Logic expression that determines whether the rule applies"
          },
          "applicationMode": {
            "type": "string",
            "enum": ["ALWAYS", "FALLBACK", "DISABLED"],
            "description": "Mode determining when the rule should be applied"
          },
          "origin": {
            "type": "string",
            "enum": ["CATALOG", "CUSTOM"],
            "description": "Whether the reward rule comes from a central catalog or is custom-created"
          },
          "rewardRuleCatalogId": {
            "type": "string",
            "description": "ID reference to the original reward rule in the catalog if applicable"
          },
          "syncWithCatalog": {
            "type": "boolean",
            "description": "Whether the reward rule should be synced with catalog updates"
          },
          "defaultLang": {
            "type": "string",
            "description": "The default language code for the reward rule content"
          },
          "langs": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of language codes available for this reward rule"
          },
          "rewards": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Reward"
            },
            "description": "List of rewards to be awarded when the rule conditions are met",
            "minItems": 1,
            "maxItems": 10
          },
          "accountId": {
            "type": "string",
            "description": "The account ID that owns this reward rule"
          },
          "workspaceId": {
            "type": "string",
            "description": "The workspace ID that contains this reward rule"
          },
          "sourceRegion": {
            "type": "string",
            "description": "AWS region where the reward rule was created"
          },
          "stage": {
            "type": "string",
            "enum": ["DRAFT", "PUBLISHED"],
            "description": "Current publication stage of the reward rule"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the reward rule was created"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the reward rule was last updated"
          }
        }
      },
      "CreateRewardRuleRequest": {
        "type": "object",
        "description": "Data required to create a new reward rule",
        "required": ["name", "ruleType", "matchEntity", "matchCondition", "applicationMode", "defaultLang", "translations", "rewards"],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the reward rule"
          },
          "ruleType": {
            "type": "string",
            "enum": ["INSTANCE", "ENTITY", "TAG"],
            "description": "Type of rule determining its scope and application"
          },
          "matchEntity": {
            "type": "string",
            "enum": ["Activity", "Quiz", "Tag"],
            "description": "Entity type this rule applies to"
          },
          "matchEntityId": {
            "type": "string",
            "description": "Specific entity ID this rule applies to (if applicable)"
          },
          "matchCondition": {
            "$ref": "#/components/schemas/JsonLogicExpression",
            "description": "JSON Logic expression that determines whether the rule applies"
          },
          "applicationMode": {
            "type": "string",
            "enum": ["ALWAYS", "FALLBACK", "DISABLED"],
            "description": "Mode determining when the rule should be applied"
          },
          "defaultLang": {
            "type": "string",
            "description": "The default language code for the reward rule content"
          },
          "translations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RewardRuleTranslation"
            },
            "description": "List of translations for the reward rule content",
            "minItems": 1,
            "maxItems": 10
          },
          "rewards": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Reward"
            },
            "description": "List of rewards to be awarded when the rule conditions are met",
            "minItems": 1,
            "maxItems": 10
          }
        }
      },
      "UpdateRewardRuleRequest": {
        "type": "object",
        "description": "Data required to update an existing reward rule",
        "required": ["name", "ruleType", "matchEntity", "matchCondition", "applicationMode", "defaultLang", "translations", "rewards"],
        "properties": {
          "name": {
            "type": "string",
            "description": "Updated name of the reward rule"
          },
          "ruleType": {
            "type": "string",
            "enum": ["INSTANCE", "ENTITY", "TAG"],
            "description": "Updated type of rule determining its scope and application"
          },
          "matchEntity": {
            "type": "string",
            "enum": ["Activity", "Quiz", "Tag"],
            "description": "Updated entity type this rule applies to"
          },
          "matchEntityId": {
            "type": "string",
            "description": "Updated specific entity ID this rule applies to (if applicable)"
          },
          "matchCondition": {
            "$ref": "#/components/schemas/JsonLogicExpression",
            "description": "Updated JSON Logic expression that determines whether the rule applies"
          },
          "applicationMode": {
            "type": "string",
            "enum": ["ALWAYS", "FALLBACK", "DISABLED"],
            "description": "Updated mode determining when the rule should be applied"
          },
          "defaultLang": {
            "type": "string",
            "description": "Updated default language code for the reward rule content"
          },
          "translations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RewardRuleTranslation"
            },
            "description": "Updated list of translations for the reward rule content",
            "minItems": 1,
            "maxItems": 10
          },
          "rewards": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Reward"
            },
            "description": "Updated list of rewards to be awarded when the rule conditions are met",
            "minItems": 1,
            "maxItems": 10
          }
        }
      },
      "RewardRuleTranslation": {
        "type": "object",
        "description": "Translation for reward rule content in a specific language",
        "required": ["lang"],
        "properties": {
          "lang": {
            "type": "string",
            "description": "Language code for this translation"
          },
          "description": {
            "type": "string",
            "description": "Translated description for the reward rule"
          }
        }
      },
      "RewardCurrency": {
        "type": "object",
        "description": "Reward currency entity representing a digital asset or point system that users can earn",
        "required": ["rewardCurrencyId", "name", "origin", "defaultLang", "langs", "createdAt", "updatedAt"],
        "properties": {
          "rewardCurrencyId": {
            "type": "string",
            "description": "Unique identifier for the reward currency",
            "minLength": 2,
            "maxLength": 30,
            "pattern": "^\\S+$"
          },
          "name": {
            "type": "string",
            "description": "Name of the reward currency"
          },
          "origin": {
            "type": "string",
            "enum": ["CATALOG", "CUSTOM"],
            "description": "Whether the reward currency comes from a central catalog or is custom-created"
          },
          "rewardCurrencyCatalogId": {
            "type": "string",
            "description": "ID reference to the original reward currency in the catalog if applicable"
          },
          "syncWithCatalog": {
            "type": "boolean",
            "description": "Whether the reward currency should be synced with catalog updates"
          },
          "defaultLang": {
            "type": "string",
            "description": "The default language code for the reward currency content"
          },
          "langs": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of language codes available for this reward currency"
          },
          "accountId": {
            "type": "string",
            "description": "The account ID that owns this reward currency"
          },
          "workspaceId": {
            "type": "string",
            "description": "The workspace ID that contains this reward currency"
          },
          "sourceRegion": {
            "type": "string",
            "description": "AWS region where the reward currency was created"
          },
          "stage": {
            "type": "string",
            "enum": ["DRAFT", "PUBLISHED"],
            "description": "Current publication stage of the reward currency"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the reward currency was created"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the reward currency was last updated"
          }
        }
      },
      "CreateRewardCurrencyRequest": {
        "type": "object",
        "description": "Data required to create a new reward currency",
        "required": ["name", "defaultLang", "translations"],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the reward currency"
          },
          "defaultLang": {
            "type": "string",
            "description": "The default language code for the reward currency content"
          },
          "translations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RewardCurrencyTranslation"
            },
            "description": "List of translations for the reward currency content",
            "minItems": 1,
            "maxItems": 10
          }
        }
      },
      "UpdateRewardCurrencyRequest": {
        "type": "object",
        "description": "Data required to update an existing reward currency",
        "required": ["name", "defaultLang", "translations"],
        "properties": {
          "name": {
            "type": "string",
            "description": "Updated name of the reward currency"
          },
          "defaultLang": {
            "type": "string",
            "description": "Updated default language code for the reward currency content"
          },
          "translations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RewardCurrencyTranslation"
            },
            "description": "Updated list of translations for the reward currency content",
            "minItems": 1,
            "maxItems": 10
          }
        }
      },
      "RewardCurrencyTranslation": {
        "type": "object",
        "description": "Translation for reward currency content in a specific language",
        "required": ["lang", "label"],
        "properties": {
          "lang": {
            "type": "string",
            "description": "Language code for this translation"
          },
          "label": {
            "type": "string",
            "description": "Translated label for the reward currency"
          },
          "description": {
            "type": "string",
            "description": "Translated description for the reward currency"
          }
        }
      },
      "Activity": {
        "type": "object",
        "description": "Activity entity representing a task or action that users can complete",
        "required": ["activityId", "name", "origin", "defaultLang", "langs", "createdAt", "updatedAt"],
        "properties": {
          "activityId": {
            "type": "string",
            "description": "Unique identifier for the activity"
          },
          "name": {
            "type": "string",
            "description": "Name of the activity"
          },
          "origin": {
            "type": "string",
            "enum": ["CATALOG", "CUSTOM"],
            "description": "Whether the activity comes from a central catalog or is custom-created"
          },
          "activityCatalogId": {
            "type": "string",
            "description": "ID reference to the original activity in the catalog if applicable"
          },
          "syncWithCatalog": {
            "type": "boolean",
            "description": "Whether the activity should be synced with catalog updates"
          },
          "defaultLang": {
            "type": "string",
            "description": "The default language code for the activity content"
          },
          "langs": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of language codes available for this activity"
          },
          "accountId": {
            "type": "string",
            "description": "The account ID that owns this activity"
          },
          "workspaceId": {
            "type": "string",
            "description": "The workspace ID that contains this activity"
          },
          "sourceRegion": {
            "type": "string",
            "description": "AWS region where the activity was created"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the activity was created"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the activity was last updated"
          }
        }
      },
      "CreateActivityRequest": {
        "type": "object",
        "description": "Data required to create a new activity",
        "required": ["name", "defaultLang", "translations"],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the activity"
          },
          "defaultLang": {
            "type": "string",
            "description": "The default language code for the activity content"
          },
          "translations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActivityTranslation"
            },
            "description": "List of translations for the activity content"
          }
        }
      },
      "UpdateActivityRequest": {
        "type": "object",
        "description": "Data required to update an existing activity",
        "required": ["name", "defaultLang", "translations"],
        "properties": {
          "name": {
            "type": "string",
            "description": "Updated name of the activity"
          },
          "defaultLang": {
            "type": "string",
            "description": "Updated default language code for the activity content"
          },
          "translations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActivityTranslation"
            },
            "description": "Updated list of translations for the activity content"
          }
        }
      },
      "ActivityTranslation": {
        "type": "object",
        "description": "Translation for activity content in a specific language",
        "required": ["lang", "label"],
        "properties": {
          "lang": {
            "type": "string",
            "description": "Language code for this translation"
          },
          "label": {
            "type": "string",
            "description": "Translated label for the activity"
          },
          "description": {
            "type": "string",
            "description": "Translated description for the activity"
          }
        }
      }
    }
  }
}
